Git的官方网站：http://git-scm.com
GitHub网站:https://github.com/ 

廖雪峰官方网站：
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000



安装GIT
	sudo apt-get install git
	
	安装完成后，还需要最后一步设置，在命令行输入：
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
	git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
	当然也可以对某个仓库指定不同的用户名和Email地址。

	
创建版本库 repository
			git add <file> 	把文件修改添加到暂存区
			git commit 		把暂存区的所有内容提交到当前分支：
	目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，
	以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
		首先，选择一个合适的地方，创建一个空目录：
			例  mkdir learngit
				cd leargit
		初始化一个Git仓库，使用 git init 命令。把这个目录变成Git可以管理的仓库：(当前目录下多了一个.git的目录)
		添加文件到Git仓库，分两步：
		第一步，使用命令 git add <file> 实际上就是把文件修改添加到暂存区；.注意，可反复多次使用，添加多个文件；
		第二步，使用命令 git commit 把暂存区的所有内容提交到当前分支：(-m后面输入的是本次提交的说明)

		
时光机穿梭
		git status 	命令掌握工作区状态（若无没有被git管理的文件，则工作区就是干净的）
		git diff 	可以查看修改内容。
	
版本回退
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令 git reset --hard commit_id。
	穿梭前，用  git log 可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用  git reflog  查看命令历史，以便确定要回到未来的哪个版本
	
工作区和暂存区
	工作区有一个隐藏目录.git，是Git的版本库。
	Git的版本库里存有称为stage（或index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。

管理修改
	每次修改，如果不add到暂存区，那就不会加入到commit中
	用	git diff HEAD -- readme.txt	命令可以查看工作区和版本库里面最新版本的区别：
	
撤销修改
			git checkout -- file 可以丢弃工作区的修改：
			git reset HEAD file  可以把暂存区的修改撤销掉（unstage），重新放回工作区
			git reset --hard commit_id 在版本的历史之间穿梭
			git log 	查看提交历史
			git reflog  查看命令历史
	场景1：想直接丢弃工作区的修改时，用命令 git checkout -- file。
	场景2：改乱了工作区且添加到了暂存区时。第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交到版本库但未推送到远程库，想要撤销本次提交，参考版本回退一节。
	
删除文件
	工作区里面删除文件：rm
	从版本库中删除该文件，那就用命令 git rm 删掉，并且 git commit -m：
	git checkout -- file其实是用版本库里的版本替换工作区的版本(适用于工作区删除而版本库里面未删除

	
远程仓库
	本地Git仓库和GitHub仓库之间的传输是通过SSH加密的
	第1步：创建SSH Key。
		在用户主目录下，有没有.ssh目录，看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。
		如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
			$ ssh-keygen -t rsa -C "youremail@example.com"
		id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
	第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
		然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
		点“Add Key”，你就应该看到已经添加的Key：
	第3步： 可用 ssh -v git@github.com 命令来测试链接是否畅通
参考网站：
https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/#adding-your-ssh-key-to-the-ssh-agent
	 a、安装ssh，因为git是基于ssh协议的，所以必须先装ssh：
		sudo apt-get install openssh-server openssh-client
        安装好ssh后，启动ssh服务：
		sudo /etc/init.d/ssh restart     
      b、安装git服务器：
		sudo apt-get install git-core
	不想让别人看到Git库，有两个办法：	
		一是交点保护费，让GitHub把公开的仓库变成私有的
		另一个办法是自己动手，搭一个Git服务器
		
添加远程仓库         (先有本地库，后有远程库的时候，如何关联远程库)
	第一步：登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：
	第二步：在Repository name填入xxxxxx，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：
	
	git remote add origin git@server-name:path/repo-name.git  关联一个远程库
	关联后，git push -u origin master  第一次推送master分支的所有内容；
	此后，每次本地提交后用 git push origin master 推送最新修改；
	
	第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：
	因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。
	Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：
	
从远程库克隆
	首先，登陆GitHub，创建一个新的仓库，名字叫xxxxxxxx：
	勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。	
	git clone命令克隆
	Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快
			例：git clone git@github.com:william/gitskills.git
			

创建与合并分支
			git branch          	查看分支  当前分支前面会标一个*号
			git branch <name>   	创建分支
			git checkout <name>		切换分支
			git checkout -b <name>	创建+切换分支    -b参数表示创建并切换
			git merge <name>		合并某分支到当前分支
			git branch -d <name>	删除分支
	Git里主分支叫master分支。HEAD指向master，master才是指向提交的，HEAD指向的就是当前分支。
	举例：
	第1步：创建dev分支，然后切换到dev分支：(增加一个dev指针，会修改HEAD指向dev)
				$ git checkout -b dev
				git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
					$ git branch dev
					$ git checkout dev
	第2步：用git branch命令查看当前分支
				git branch命令会列出所有分支，当前分支前面会标一个*号。
	第3步：此时dev是工作分支  
				工作后可以用  git add <file> 	把文件修改添加到暂存区
	第4步：切换回master分支：    
				$ git checkout master
				只是修改HEAD指向master,让master成为工作分支 
	第5步：将之前dev分支的工作成果合并到master分支上
				git merge dev
				就是直接把master指向dev的当前提交，HEAD仍指向master
				（此时是Fast-forward “快进模式”）
	第6步：删除dev分支，只剩下master分支
				$ git branch -d dev
				$ git branch    //查看分支
				
解决冲突
		git log --graph命令可以看到分支合并图。
	当Git无法自动合并分支时，须先解决冲突。
	当分支各自都分别有新的提交(都git add过),用git merge 就无法实现“快速合并”，会出现冲突
	？？？？git log --graph --pretty=oneline --abbrev-commit中各参数意义
	
分支管理策略
	合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，
	而fast forward合并就看不出来曾经做过合并。
	
	一般性策略
	master分支应该是非常稳定的，仅用来发布新版本
	dev分支用来干活，是不稳定的
	
Bug分支
			git stash  先把工作现场储藏去修复bug
			git stash list  命令看看工作现场存在哪里
			git stash pop 	在修复工作完成后回到工作现场，同时把stash内容也删。
			git stash apply	恢复工作现场，stash内容并不删除
			git stash drop	删除stash内容；
	修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
	可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令 $ git stash apply stash@{0}
	例如：master主分支上出现bug,现在工作分支dev工作未完成
		第1步：git stash    把工作现场存储起来
		第2步：git checkout master   切换到master分区
		第3步：git checkout -b issue-101  在master创建临时bug分支
		第4步：修复bug  然后git add 提高
		第5步：git checkout master   切回到master分支
			   git merge --no-ff -m "merged bug fix 101" issue-101  完成合并
			   git branch -d issue-101  删除issue-101临时分支
		第6步：git checkout dev   回到dev分支干活
		第7步：git stash list    查看stash内容(原来的工作现场)存在哪儿
			   git stash pop     恢复工作现场 同时把stash内容也删了
			   
Feature分支    （添加新的功能）
				git branch -D <name>	强行删除丢弃一个没有被合并过的分支
	开发一个新feature，最好新建一个分支；
		feature分支和bug分支是类似的(有需要时用到stash)，合并，然后删除
		没有被合并过的future分支，可以通过git branch -D <name>强行删除
		
多人合作
			git remote 	   查看远程库信息
			git remote -v  查看更详细的远程库信息
			git push origin branch-name  从本地往远程推送分支
			git pull    	抓取分支  把最新的提交从远程抓取下来
			git checkout -b branch-name origin/branch-name	在本地创建和远程分支对应的分支(本地和远程分支的名称最好一致)
			git branch --set-upstream branch-name origin/branch-name	建立本地分支和远程分支的关联
			
	多人协作的工作模式通常是这样：
		首先，可以试图用git push origin branch-name推送自己的修改；
		如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
		如果合并有冲突，则解决冲突，并在本地提交；
		没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
		如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，
		用命令git branch --set-upstream branch-name origin/branch-name。
	
	例如：	多人协作时，大家都会往master和dev分支上推送各自的修改
			当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支
		第1步：git checkout -b dev origin/dev	你的小伙伴创建本地dev分支
		第2步：git commit -m "xx xx xxx "  		他时不时地把dev分支push到远程
		第3步：git commit -m "xxx xxx xxxx"		你也对同样的文件作了修改，并试图推送 推送失败
		第4步：git pull  	解决方法用git pull把最新的提交从origin/dev抓下来，在本地合并，解决冲突，再推送：
		如果git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接
		第5步：git branch --set-upstream dev origin/dev  设置dev和origin/dev的链接
			   git pull  	再重新pull
		这回git pull成功，但是合并有冲突需手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：
				git log --graph --pretty=oneline --abbrev-commit 可以看到分支合并图；
				解决冲突 合并
				git push origin dev   推送
				

标签管理
	Git的标签是版本库的快照，它是指向某个commit的指针，创建和删除标签都是瞬间完成的。
	commit一大串不容易记，标签很容易记。
	
创建标签
			git tag <tagname>		用于新建一个标签，默认为HEAD，也可以指定一个commit id；
			git tag <tagname> <commit id>   给commit id对应的打上标签
			git tag -a <tagname> -m "xxxx"	可以指定标签信息(-a指定标签名，-m指定说明文字)
			git tag -s <tagname> -m "xxxx"	可以用PGP签名标签(-s用私钥签名一个标签)
			git tag				可以查看所有标签,(标签不是按时间顺序列出，而是按字母排序的)
			git show <tagname>	查看标签信息
	例：
		第1步：先切换到要打标签的分支
					git branch      
					git checkout master
				git tag <name>就可以打一个新标签，默认标签是打在最新提交的commit上的
					git tag v1.0
				git tag查看所有标签
					git tag
		第2步：给特定commit打上标签
				先查看历史commit
					git log --pretty=oneline --abbrev-commit
				找到对应的commit id，打上标签
					git tag <tagname> <commit id>
	
	git tag -s <tagname> -m "xxxx"	可以用PGP签名标签(-s用私钥签名一个标签)
	签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
	如果报错，请参考GnuPG帮助文档配置Key。
	
操作标签
			git push origin <tagname>	推送一个本地标签；
			git push origin --tags		推送全部未推送过的本地标签；
			git tag -d <tagname>		删除一个本地标签；
			git push origin :refs/tags/<tagname>	删除一个远程标签。
	标签已经推送到远程，要删除远程标签
		第1步：先从本地删除
				git tag -d <tagname>
		第2步：再用push命令删除远程标签
				git push origin :refs/tags/<tagname>

				
使用GitHub
	在GitHub上，可以任意Fork开源仓库；
	自己拥有Fork后的仓库的读写权限；
	可以推送pull request给官方仓库来贡献代码
	例如：人气极高的bootstrap项目，这是一个非常强大的CSS框架
		第1步：	访问它的项目主页https://github.com/twbs/bootstrap，
				点“Fork”就在自己的账号下克隆了一个bootstrap仓库
		第2步：从自己的账号下clone
				git clone git@github.com:william/bootstrap.git
		第3步：自己本地工作修改后，可以往自己的仓库推送
		第4步：希望bootstrap的官方库能接受你的修改，可以在GitHub上发起一个pull request
	注意：一定要从自己的账号下clone仓库，这样你才能推送修改。
		如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，
		因为没有权限，你将不能推送修改。
		

自定义Git
	例如：	$ git config --global color.ui true
			让Git显示颜色，会让命令输出看起来更醒目
			
忽略特殊文件
	忽略某些文件时，需要编写.gitignore；
	.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
	不需要从头写.gitignore文件，GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。
	所有配置文件可以直接在线浏览：https://github.com/github/gitignore
	忽略文件的原则是：
		忽略操作系统自动生成的文件，比如缩略图等；
		忽略编译生成的中间文件、可执行文件等，
			如果一个文件是通过另一个文件自动生成,那自动生成的文件就没必要放进版本库，
			比如Java编译产生的.class文件；
		忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。
		
	检验.gitignore的标准是git status命令是不是说working directory clean。
	某文件被.gitignore忽略了想添加该文件，可以用-f强制添加到Git	    git add -f <filename>
	用git check-ignore命令检查.gitignore那条规则有问题       例git check-ignore -v <filename>
	
配置别名
			git config --global alias.st status		st表示status
			git config --global alias.co checkout	co表示checkout
			git config --global alias.ci commit		ci表示commit
			git config --global alias.br branch		br表示branch
			
			git config --global alias.unstage 'reset HEAD'  
				    git unstage file
				  ==git reset HEAD file   把暂存区的修改撤销掉（unstage），重新放回工作区
				  
			git config --global alias.last 'log -1'
					git last
				  ==git log -l   显示最后一次提交信息
				  
			git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset 
			-%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
			          查看git lg 效果    ？？？理解配置中意思
					  
搭建Git服务器
			要方便管理公钥，用Gitosis；
			要像SVN那样变态地控制权限，用Gitolite
	
	搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian
	假设你已经有sudo权限的用户账号
	第一步，安装git：
		$ sudo apt-get install git
	第二步，创建一个git用户，用来运行git服务：
		$ sudo adduser git
	第三步，创建证书登录：
		收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，
		把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
	第四步，初始化Git仓库：
		先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
		$ sudo git init --bare sample.git
		Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，
		所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
		$ sudo chown -R git:git sample.git
	第五步，禁用shell登录：
		出于安全考虑，第二步创建的git用户不允许登录shell，
		这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
		git:x:1001:1001:,,,:/home/git:/bin/bash
		改为：
		git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
		这样，git用户可以正常通过ssh使用git，但无法登录shell，
		因为我们为git用户指定的git-shell每次一登录就自动退出。
	第六步，克隆远程仓库：
		现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
		$ git clone git@server:/srv/sample.git
	剩下的推送就简单了。
	
	管理公钥	Gitosis
		人很多没法把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件
	
	管理权限	Gitolite
		Git支持钩子(hook),可以在服务器端编写一系列脚本来控制提交等操作,达到权限控制的目的。
		Gitolite就是这个工具。
						